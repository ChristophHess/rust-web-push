var searchIndex = {};
searchIndex["web_push"] = {"doc":"Web Push","items":[[3,"WebPushResponse","web_push","The response future. When successful, returns an empty `Unit` for failures gives a WebPushError.",null,null],[3,"WebPushClient","","An async client for sending the notification payload.",null,null],[3,"WebPushMessage","","Everything needed to send a push notification to the user.",null,null],[12,"gcm_key","","When not using VAPID, certain browsers need a Firebase account key for sending a notification.",0,null],[12,"endpoint","","The endpoint URI where to send the payload.",0,null],[12,"ttl","","Time to live, how long the message should wait in the server if user is not online. Some services require this value to be set.",0,null],[12,"payload","","The encrypted request payload, if sending any data.",0,null],[12,"service","","The service type where to connect. Firebase when not using VAPID with Chrome-based browsers. Data is in JSON format instead of binary.",0,null],[3,"WebPushMessageBuilder","","The main class for creating a notification payload.",null,null],[3,"WebPushPayload","","The push content payload, already in an encrypted form.",null,null],[12,"content","","Encrypted content data.",1,null],[12,"crypto_headers","","Headers depending on the authorization scheme and encryption standard.",1,null],[12,"content_encoding","","The encryption standard.",1,null],[3,"SubscriptionInfo","","Client info for sending the notification. Maps the values from browser's subscription info JSON data.",null,null],[12,"endpoint","","The endpoint URI for sending the notification.",2,null],[12,"keys","","The encryption key and secret for payload encryption.",2,null],[3,"SubscriptionKeys","","Encryption keys from the client.",null,null],[12,"p256dh","","The public key",3,null],[12,"auth","","Authentication secret",3,null],[3,"VapidSignature","","A struct representing a VAPID signature. Should be generated using the VapidSignatureBuilder.",null,null],[12,"auth_t","","The signature",4,null],[12,"auth_k","","The public key",4,null],[3,"VapidSignatureBuilder","","A VAPID signature builder for generating an optional signature to the request. With a given signature, one can pass the registration to Google's FCM service. And prevent unauthorized notifications to be sent to the client.",null,null],[4,"WebPushError","","",null,null],[13,"Unspecified","","An unknown error happened encrypting the message,",5,null],[13,"Unauthorized","","Please provide valid credentials to send the notification",5,null],[13,"BadRequest","","Request was badly formed",5,null],[13,"ServerError","","Contains an optional `Duration`, until the user can retry the request",5,null],[13,"NotImplemented","","The feature is not implemented yet",5,null],[13,"InvalidUri","","The provided URI is invalid",5,null],[13,"TimeoutError","","The request timed out",5,null],[13,"EndpointNotValid","","The URL specified is no longer valid and should no longer be used",5,null],[13,"EndpointNotFound","","The URL specified is invalid and should not be used again",5,null],[13,"PayloadTooLarge","","Maximum allowed payload size is 3800 characters",5,null],[13,"TlsError","","Could not initialize a TLS connection",5,null],[13,"SslError","","Error in SSL signing",5,null],[13,"IoError","","Error in reading a file",5,null],[13,"InvalidPackageName","","Make sure the message was addressed to a registration token whose package name matches the value passed in the request (Google).",5,null],[13,"InvalidTtl","","The TTL value provided was not valid or was not provided",5,null],[13,"MissingCryptoKeys","","The request was missing required crypto keys",5,null],[13,"InvalidCryptoKeys","","One or more of the crypto key elements are invalid.",5,null],[13,"InvalidResponse","","Corrupted response data",5,null],[13,"Other","","",5,null],[4,"ContentEncoding","","",null,null],[13,"AesGcm","","",6,null],[13,"Aes128Gcm","","",6,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",7,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"new","","",8,{"inputs":[],"output":{"generics":["webpushclient","webpusherror"],"name":"result"}}],[11,"send","","Sends a notification. Never times out.",8,{"inputs":[{"name":"self"},{"name":"webpushmessage"}],"output":{"name":"webpushresponse"}}],[11,"send_with_timeout","","Sends a notification with a timeout. Triggers `WebPushError::TimeoutError` if the request takes too long.",8,{"inputs":[{"name":"self"},{"name":"webpushmessage"},{"name":"duration"}],"output":{"generics":["webpushresponse"],"name":"timeout"}}],[11,"call","","",8,null],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"webpusherror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"webpusherror"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",5,{"inputs":[{"name":"jsonerror"}],"output":{"name":"webpusherror"}}],[11,"from","","",5,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"webpusherror"}}],[11,"from","","",5,{"inputs":[{"name":"invaliduri"}],"output":{"name":"webpusherror"}}],[11,"from","","",5,{"inputs":[{"generics":["webpushresponse"],"name":"timeouterror"}],"output":{"name":"webpusherror"}}],[11,"from","","",5,{"inputs":[{"name":"unspecified"}],"output":{"name":"webpusherror"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"webpusherror"}}],[11,"from","","",5,{"inputs":[{"name":"ioerror"}],"output":{"name":"webpusherror"}}],[11,"from","","",5,{"inputs":[{"name":"errorstack"}],"output":{"name":"webpusherror"}}],[11,"from","","",5,{"inputs":[{"name":"decodeerror"}],"output":{"name":"webpusherror"}}],[11,"short_description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","A constructor function to create a new `SubscriptionInfo`, if not using Serde's serialization.",2,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"subscriptioninfo"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"webpushpayload"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"webpushpayload"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a builder for generating the web push payload.",9,{"inputs":[{"name":"subscriptioninfo"}],"output":{"generics":["webpushmessagebuilder","webpusherror"],"name":"result"}}],[11,"set_ttl","","How long the server should keep the message if it cannot be delivered currently. If not set, the message is deleted immediately on failed delivery.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"set_gcm_key","","For Google's push service, one must provide an API key from Firebase console.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"set_vapid_signature","","Add a VAPID signature to the request. To be generated with the VapidSignatureBuilder.",9,{"inputs":[{"name":"self"},{"name":"vapidsignature"}],"output":null}],[11,"set_payload","","If set, the client will get content in the notification. Has a maximum size of 3800 characters.",9,null],[11,"build","","Builds and if set, encrypts the payload. Any errors will be `Undefined`, meaning something was wrong in the given public key or authentication.",9,{"inputs":[{"name":"self"}],"output":{"generics":["webpushmessage","webpusherror"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_pem","","Creates a new builder from a PEM formatted private key.",10,{"inputs":[{"name":"r"},{"name":"subscriptioninfo"}],"output":{"generics":["vapidsignaturebuilder","webpusherror"],"name":"result"}}],[11,"from_der","","Creates a new builder from a DER formatted private key.",10,{"inputs":[{"name":"r"},{"name":"subscriptioninfo"}],"output":{"generics":["vapidsignaturebuilder","webpusherror"],"name":"result"}}],[11,"add_claim","","Add a claim to the signature. Claims `aud` and `exp` are automatically added to the signature. Add them manually to override the default values.",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":null}],[11,"build","","Builds a signature to be used in WebPushMessageBuilder.",10,{"inputs":[{"name":"self"}],"output":{"generics":["vapidsignature","webpusherror"],"name":"result"}}]],"paths":[[3,"WebPushMessage"],[3,"WebPushPayload"],[3,"SubscriptionInfo"],[3,"SubscriptionKeys"],[3,"VapidSignature"],[4,"WebPushError"],[4,"ContentEncoding"],[3,"WebPushResponse"],[3,"WebPushClient"],[3,"WebPushMessageBuilder"],[3,"VapidSignatureBuilder"]]};
initSearch(searchIndex);
